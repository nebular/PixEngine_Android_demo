apply plugin: 'com.android.application'

def platformVersion = 24      // openGLES 3.2 min api level
// def platformVersion = 18    //openGLES 3 min api level
// def platformVersion = 12    //openGLES 2 min api level

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId 'tv.nebular.olcpxe.samples'
        minSdkVersion "${platformVersion}"
        targetSdkVersion 28
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            version '3.10.2'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

}

task extractSo(type: Copy) {
    println 'Extracting *.so file(s)....'
    from zipTree("${project.rootDir}/pixFu_android/pixFu_android.aar")
    into "${project.rootDir}/${project.name}/src/main/jniLibs/"
    include "jni/**/*.so"
    eachFile {
        def segments = it.getRelativePath().getSegments() as List
        println segments
        it.setPath(segments.tail().join("/"))
        return it
    }
    includeEmptyDirs = false
}



task extractSoHeaders(type: Copy) {
    println 'Extracting header file(s)....'
    from zipTree("${project.rootDir}/pixFu_android/pixFu_android.aar")
    into "${project.buildDir}/headers/"
    include "res/raw/*.zip"
    eachFile {
        def segments = it.getRelativePath().getSegments() as List
        println segments
        it.setPath(segments.tail().join("/"))
        return it
    }
    includeEmptyDirs = false
}
/*

*/

task unpackSoHeaders(type: Copy) {
    println 'Unpacking header file(s)....'
    from zipTree("${project.buildDir}/headers/raw/pixFu_headers.zip")
    into "${project.rootDir}/${project.name}/src/main/headers/"
    include "*.h"
    include "**/*.h"
    include "**/**/*.h"
    include "*.hpp"
    include "**/*.hpp"
    include "**/**/*.hpp"

    includeEmptyDirs = false
}

dependencies {
    implementation project(path: ':pixFu_android')
}


unpackSoHeaders.dependsOn extractSoHeaders
extractSoHeaders.dependsOn extractSo
preBuild.dependsOn unpackSoHeaders

